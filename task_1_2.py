'''
2. Создать список, состоящий из кубов нечётных чисел от 1 до 1000 (куб X - третья степень числа X):

Вычислить сумму тех чисел из этого списка, сумма цифр которых делится нацело на 7. Например, число «19 ^ 3 = 6859» будем включать в сумму, так как 6 + 8 + 5 + 9 = 28 – делится нацело на 7. 
Внимание: использовать только арифметические операции!
К каждому элементу списка добавить 17 и заново вычислить сумму тех чисел из этого списка, сумма цифр которых делится нацело на 7.
* Решить задачу под пунктом b, не создавая новый список.
'''
from functional_pipeline import pipeline

# определяем необходимые функции
# функция проеврки нечетности числа
is_odd = lambda x: x % 2 == 1
# функция возведения числа в куб
pow3 = lambda x: x*x*x
# функция прибавления 17 к заданному числу
plus17 = lambda x: x+17

# функция проверки кратности 7 суммы цифр заданного числа 
def is_sum_dig_mult7(x, mult = 7):
    if sum([int(a) for a in str(x)])%mult == 0: return 1
    else: return 0

# Вычисляем первую часть
result = pipeline(
    range(1,1001), # Создаем список от 1 до 1000
    [
        (filter, is_odd), # нечётных чисел 
        (map, pow3), # возводим каждый элелемент в 3 степень
        (filter, is_sum_dig_mult7), #выбираем элементы сумма цифр которых делится нацело на 7 
        sum # суммируем
    ]
)
print("\nСумма чисел из списка 1: ", result)

# Вычисляем вторую часть
result = pipeline(
    range(1,1001), # Создаем список от 1 до 1000
    [
        (filter, is_odd), # нечётных чисел 
        (map, pow3), # возводим каждый элелемент в 3 степень
        (map, plus17), # к элементу каждого списка добавляем 17
        (filter, is_sum_dig_mult7), #выбираем элементы сумма цифр которых делится нацело на 7 
        sum # суммируем
    ]
)
print("Сумма чисел из списка 2: ", result)